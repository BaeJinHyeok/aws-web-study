plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
}

group = 'com.study'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'name.remal.gradle-plugins.lombok:lombok:2.0.2'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    runtimeOnly 'com.h2database:h2'
    // 현재까지 만든 서비스는 애플리케이션 재실행 시 세션이 내장 톰캣의 메모리에 저장되기 때문에 로그인이 풀림
    // 기본적으로 세션은 실행되는 WAS 의 메모리에서 저장되고 호출됨 -> 메모리에 저장되다보니 내장 톰캣처럼 애플리케이션 실행 시 실행되는 구조에선 항상 초기화가 됨
    // 즉, 배포할 때마다 톰캣이 재시작 됨.
    // 이 외에도 2대 이사의 서버에서 서비스하고있다면 톰캣마다 세션 동기화 설정을 해야만 하는 문제가 있음.
    // 그래서 실제 현업에서는 세션 저장소에 대해 다음 3가지 중 한 가지를 선택함
    // 1. 톰캣 세션 사용 -> 별다른 설정 없이 기본적으로 선택. 톰캣(WAS)에 세션이 저장되기 때문에 2대 이상 WAS가 구동되는 환경에선 톰캣들 간의 세션공유를 위한 추가설정 필요.
    // 2. MySQL 과 같은 데이터베이스를 세션 저장소로 사용 -? 여러 WAS 간 공용세션을 사용 할 수 있는 가장 쉬운 방법.
    //    -> 많은 설정이 필요 없지만 결국 로그인 요청마다 DB IO가 발생하여 성능상 이슈 발생 가능 -> 보통 로그인 요청이 많이 없는 백오피스, 사내 시스템 용도에서 사용
    // 3. Redis, Memcached 와 같은 메모리 DB를 세션 저장소로 사용 -> B2C 에서 가장 많이 사용하는 방식. 실제 서비스로 사용하기 위해서는 Embedded Redis 와 같은 방식이 아닌 외부 메모리 서버가 필요
    // 여기서는 두 번째 방식인 데이터베이스를 세션 저장소로 사용하는 방식을 선택. -> 설정이 간단하고 사용자 서비스가 많지않으며 비용절감을 위해서임.
    // 이후 AWS에서 이 서비스를 배포하고 운영할 때를 생각하면 Redis와 같은 메모리 DB는 사용하기 부담스러움 -> Redis와 같은 서비스(엘라스틱 캐시)에 별도로 사용료를 지불해야하기 때문.
    // 운영중인 서비스가 커진다면 고려해봄직함.
    implementation 'org.springframework.session:spring-session-jdbc' // propreties에 세션 저장소를 jdbc로 선택하도록 spring.session.sotre-type=jdbc

}

tasks.named('test') {
    useJUnitPlatform()
}
